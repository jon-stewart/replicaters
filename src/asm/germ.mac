;------------------------------------------------------------------------------
; _print:
;       wrapper for print function
; in:       
;       1-start address
;       2-string offset
;       3-string length
; calls:
;       print
;
%macro _print 3
%ifdef DEBUG
    mov         rdx, %1             ; start address
    lea         rsi, [rdx+%2]       ; string address
    xor         rdx, rdx
    mov         dl,  %3             ; string length
    call        print
    cmp         rax, rdx            ; compare #bytes written to string length
    jne         failure             ; goto fail if any issues
%endif
%endmacro

;------------------------------------------------------------------------------
; _get_var:
;       calculate variable address and access it
; in:
;       1-start address
;       2-variable offset
;       3-register out
;
%macro _get_var 3
    mov         r10, %1
    add         r10, %2
    mov         %3, [r10]
%endmacro

;------------------------------------------------------------------------------
; _debug:
;       save all registers and then make the call to the debug callback
;       function.
; in:
;       1-debug function address
%macro _debug 1
%ifdef DEBUG
    push rax
    push rbx
    push rcx
    push rdx
    push rdi
    push rsi
    push r9
    push r8

    call %1

    pop r8
    pop r9
    pop rsi
    pop rdi
    pop rdx
    pop rcx
    pop rbx
    pop rax
%endif
%endmacro
